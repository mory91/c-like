/* The following code was generated by JFlex 1.6.1 */



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>/home/morteza/Documents/APHOMEWORK/moss/compiler_design/Lexer.jflex</tt>
 */
public class Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHARLITERAL = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\2\1\100\1\101\1\1\16\7\4\0\1\3\1\70"+
    "\1\24\1\0\1\6\1\4\1\5\1\25\1\55\1\56\1\75\1\74"+
    "\1\64\1\23\1\21\1\76\1\10\1\16\2\15\4\17\2\11\1\72"+
    "\1\63\1\67\1\65\1\66\2\0\3\14\1\20\1\22\1\20\5\6"+
    "\1\12\13\6\1\13\2\6\1\61\1\26\1\62\1\77\1\6\1\0"+
    "\1\34\1\27\1\40\1\46\1\33\1\47\1\50\1\42\1\44\1\6"+
    "\1\35\1\31\1\6\1\43\1\30\2\6\1\32\1\41\1\37\1\45"+
    "\1\54\1\51\1\52\1\36\1\53\1\57\1\73\1\60\1\71\6\7"+
    "\1\102\32\7\2\0\4\6\4\0\1\6\2\0\1\7\7\0\1\6"+
    "\4\0\1\6\5\0\27\6\1\0\37\6\1\0\u01ca\6\4\0\14\6"+
    "\16\0\5\6\7\0\1\6\1\0\1\6\21\0\160\7\5\6\1\0"+
    "\2\6\2\0\4\6\10\0\1\6\1\0\3\6\1\0\1\6\1\0"+
    "\24\6\1\0\123\6\1\0\213\6\1\0\5\7\2\0\236\6\11\0"+
    "\46\6\2\0\1\6\7\0\47\6\7\0\1\6\1\0\55\7\1\0"+
    "\1\7\1\0\2\7\1\0\2\7\1\0\1\7\10\0\33\6\5\0"+
    "\3\6\15\0\5\7\6\0\1\6\4\0\13\7\5\0\53\6\37\7"+
    "\4\0\2\6\1\7\143\6\1\0\1\6\10\7\1\0\6\7\2\6"+
    "\2\7\1\0\4\7\2\6\12\7\3\6\2\0\1\6\17\0\1\7"+
    "\1\6\1\7\36\6\33\7\2\0\131\6\13\7\1\6\16\0\12\7"+
    "\41\6\11\7\2\6\4\0\1\6\5\0\26\6\4\7\1\6\11\7"+
    "\1\6\3\7\1\6\5\7\22\0\31\6\3\7\104\0\1\6\1\0"+
    "\13\6\67\0\33\7\1\0\4\7\66\6\3\7\1\6\22\7\1\6"+
    "\7\7\12\6\2\7\2\0\12\7\1\0\7\6\1\0\7\6\1\0"+
    "\3\7\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0"+
    "\1\6\3\0\4\6\2\0\1\7\1\6\7\7\2\0\2\7\2\0"+
    "\3\7\1\6\10\0\1\7\4\0\2\6\1\0\3\6\2\7\2\0"+
    "\12\7\4\6\7\0\1\6\5\0\3\7\1\0\6\6\4\0\2\6"+
    "\2\0\26\6\1\0\7\6\1\0\2\6\1\0\2\6\1\0\2\6"+
    "\2\0\1\7\1\0\5\7\4\0\2\7\2\0\3\7\3\0\1\7"+
    "\7\0\4\6\1\0\1\6\7\0\14\7\3\6\1\7\13\0\3\7"+
    "\1\0\11\6\1\0\3\6\1\0\26\6\1\0\7\6\1\0\2\6"+
    "\1\0\5\6\2\0\1\7\1\6\10\7\1\0\3\7\1\0\3\7"+
    "\2\0\1\6\17\0\2\6\2\7\2\0\12\7\1\0\1\6\17\0"+
    "\3\7\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0"+
    "\2\6\1\0\5\6\2\0\1\7\1\6\7\7\2\0\2\7\2\0"+
    "\3\7\10\0\2\7\4\0\2\6\1\0\3\6\2\7\2\0\12\7"+
    "\1\0\1\6\20\0\1\7\1\6\1\0\6\6\3\0\3\6\1\0"+
    "\4\6\3\0\2\6\1\0\1\6\1\0\2\6\3\0\2\6\3\0"+
    "\3\6\3\0\14\6\4\0\5\7\3\0\3\7\1\0\4\7\2\0"+
    "\1\6\6\0\1\7\16\0\12\7\11\0\1\6\7\0\3\7\1\0"+
    "\10\6\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6\3\0"+
    "\1\6\7\7\1\0\3\7\1\0\4\7\7\0\2\7\1\0\2\6"+
    "\6\0\2\6\2\7\2\0\12\7\22\0\2\7\1\0\10\6\1\0"+
    "\3\6\1\0\27\6\1\0\12\6\1\0\5\6\2\0\1\7\1\6"+
    "\7\7\1\0\3\7\1\0\4\7\7\0\2\7\7\0\1\6\1\0"+
    "\2\6\2\7\2\0\12\7\1\0\2\6\17\0\2\7\1\0\10\6"+
    "\1\0\3\6\1\0\51\6\2\0\1\6\7\7\1\0\3\7\1\0"+
    "\4\7\1\6\10\0\1\7\10\0\2\6\2\7\2\0\12\7\12\0"+
    "\6\6\2\0\2\7\1\0\22\6\3\0\30\6\1\0\11\6\1\0"+
    "\1\6\2\0\7\6\3\0\1\7\4\0\6\7\1\0\1\7\1\0"+
    "\10\7\22\0\2\7\15\0\60\6\1\7\2\6\7\7\4\0\10\6"+
    "\10\7\1\0\12\7\47\0\2\6\1\0\1\6\2\0\2\6\1\0"+
    "\1\6\2\0\1\6\6\0\4\6\1\0\7\6\1\0\3\6\1\0"+
    "\1\6\1\0\1\6\2\0\2\6\1\0\4\6\1\7\2\6\6\7"+
    "\1\0\2\7\1\6\2\0\5\6\1\0\1\6\1\0\6\7\2\0"+
    "\12\7\2\0\4\6\40\0\1\6\27\0\2\7\6\0\12\7\13\0"+
    "\1\7\1\0\1\7\1\0\1\7\4\0\2\7\10\6\1\0\44\6"+
    "\4\0\24\7\1\0\2\7\5\6\13\7\1\0\44\7\11\0\1\7"+
    "\71\0\53\6\24\7\1\6\12\7\6\0\6\6\4\7\4\6\3\7"+
    "\1\6\3\7\2\6\7\7\3\6\4\7\15\6\14\7\1\6\17\7"+
    "\2\0\46\6\1\0\1\6\5\0\1\6\2\0\53\6\1\0\u014d\6"+
    "\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0\51\6"+
    "\1\0\4\6\2\0\41\6\1\0\4\6\2\0\7\6\1\0\1\6"+
    "\1\0\4\6\2\0\17\6\1\0\71\6\1\0\4\6\2\0\103\6"+
    "\2\0\3\7\40\0\20\6\20\0\125\6\14\0\u026c\6\2\0\21\6"+
    "\1\0\32\6\5\0\113\6\3\0\3\6\17\0\15\6\1\0\4\6"+
    "\3\7\13\0\22\6\3\7\13\0\22\6\2\7\14\0\15\6\1\0"+
    "\3\6\1\0\2\7\14\0\64\6\40\7\3\0\1\6\3\0\2\6"+
    "\1\7\2\0\12\7\41\0\3\7\2\0\12\7\6\0\130\6\10\0"+
    "\51\6\1\7\1\6\5\0\106\6\12\0\35\6\3\0\14\7\4\0"+
    "\14\7\12\0\12\7\36\6\2\0\5\6\13\0\54\6\4\0\21\7"+
    "\7\6\2\7\6\0\12\7\46\0\27\6\5\7\4\0\65\6\12\7"+
    "\1\0\35\7\2\0\13\7\6\0\12\7\15\0\1\6\130\0\5\7"+
    "\57\6\21\7\7\6\4\0\12\7\21\0\11\7\14\0\3\7\36\6"+
    "\15\7\2\6\12\7\54\6\16\7\14\0\44\6\24\7\10\0\12\7"+
    "\3\0\3\6\12\7\44\6\122\0\3\7\1\0\25\7\4\6\1\7"+
    "\4\6\3\7\2\6\11\0\300\6\47\7\25\0\4\7\u0116\6\2\0"+
    "\6\6\2\0\46\6\2\0\6\6\2\0\10\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\37\6\2\0\65\6\1\0\7\6\1\0"+
    "\1\6\3\0\3\6\1\0\7\6\3\0\4\6\2\0\6\6\4\0"+
    "\15\6\5\0\3\6\1\0\7\6\16\0\5\7\30\0\1\100\1\100"+
    "\5\7\20\0\2\6\23\0\1\6\13\0\5\7\5\0\6\7\1\0"+
    "\1\6\15\0\1\6\20\0\15\6\3\0\33\6\25\0\15\7\4\0"+
    "\1\7\3\0\14\7\21\0\1\6\4\0\1\6\2\0\12\6\1\0"+
    "\1\6\3\0\5\6\6\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\13\6\2\0\4\6\5\0\5\6\4\0\1\6\21\0"+
    "\51\6\u0a77\0\57\6\1\0\57\6\1\0\205\6\6\0\4\6\3\7"+
    "\2\6\14\0\46\6\1\0\1\6\5\0\1\6\2\0\70\6\7\0"+
    "\1\6\17\0\1\7\27\6\11\0\7\6\1\0\7\6\1\0\7\6"+
    "\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6"+
    "\1\0\40\7\57\0\1\6\u01d5\0\3\6\31\0\11\6\6\7\1\0"+
    "\5\6\2\0\5\6\4\0\126\6\2\0\2\7\2\0\3\6\1\0"+
    "\132\6\1\0\4\6\5\0\51\6\3\0\136\6\21\0\33\6\65\0"+
    "\20\6\u0200\0\u19b6\6\112\0\u51cd\6\63\0\u048d\6\103\0\56\6\2\0"+
    "\u010d\6\3\0\20\6\12\7\2\6\24\0\57\6\1\7\4\0\12\7"+
    "\1\0\31\6\7\0\1\7\120\6\2\7\45\0\11\6\2\0\147\6"+
    "\2\0\4\6\1\0\4\6\14\0\13\6\115\0\12\6\1\7\3\6"+
    "\1\7\4\6\1\7\27\6\5\7\20\0\1\6\7\0\64\6\14\0"+
    "\2\7\62\6\21\7\13\0\12\7\6\0\22\7\6\6\3\0\1\6"+
    "\4\0\12\7\34\6\10\7\2\0\27\6\15\7\14\0\35\6\3\0"+
    "\4\7\57\6\16\7\16\0\1\6\12\7\46\0\51\6\16\7\11\0"+
    "\3\6\1\7\10\6\2\7\2\0\12\7\6\0\27\6\3\0\1\6"+
    "\1\7\4\0\60\6\1\7\1\6\3\7\2\6\2\7\5\6\2\7"+
    "\1\6\1\7\1\6\30\0\3\6\2\0\13\6\5\7\2\0\3\6"+
    "\2\7\12\0\6\6\2\0\6\6\2\0\6\6\11\0\7\6\1\0"+
    "\7\6\221\0\43\6\10\7\1\0\2\7\2\0\12\7\6\0\u2ba4\6"+
    "\14\0\27\6\4\0\61\6\u2104\0\u016e\6\2\0\152\6\46\0\7\6"+
    "\14\0\5\6\5\0\1\6\1\7\12\6\1\0\15\6\1\0\5\6"+
    "\1\0\1\6\1\0\2\6\1\0\2\6\1\0\154\6\41\0\u016b\6"+
    "\22\0\100\6\2\0\66\6\50\0\15\6\3\0\20\7\20\0\7\7"+
    "\14\0\2\6\30\0\3\6\31\0\1\6\6\0\5\6\1\0\207\6"+
    "\2\0\1\7\4\0\1\6\13\0\12\7\7\0\32\6\4\0\1\6"+
    "\1\0\32\6\13\0\131\6\3\0\6\6\2\0\6\6\2\0\6\6"+
    "\2\0\3\6\3\0\2\6\3\0\2\6\22\0\3\7\4\0\14\6"+
    "\1\0\32\6\1\0\23\6\1\0\2\6\1\0\17\6\2\0\16\6"+
    "\42\0\173\6\105\0\65\6\210\0\1\7\202\0\35\6\3\0\61\6"+
    "\57\0\37\6\21\0\33\6\65\0\36\6\2\0\44\6\4\0\10\6"+
    "\1\0\5\6\52\0\236\6\2\0\12\7\u0356\0\6\6\2\0\1\6"+
    "\1\0\54\6\1\0\2\6\3\0\1\6\2\0\27\6\252\0\26\6"+
    "\12\0\32\6\106\0\70\6\6\0\2\6\100\0\1\6\3\7\1\0"+
    "\2\7\5\0\4\7\4\6\1\0\3\6\1\0\33\6\4\0\3\7"+
    "\4\0\1\7\40\0\35\6\203\0\66\6\12\0\26\6\12\0\23\6"+
    "\215\0\111\6\u03b7\0\3\7\65\6\17\7\37\0\12\7\20\0\3\7"+
    "\55\6\13\7\2\0\1\7\22\0\31\6\7\0\12\7\6\0\3\7"+
    "\44\6\16\7\1\0\12\7\100\0\3\7\60\6\16\7\4\6\13\0"+
    "\12\7\u04a6\0\53\6\15\7\10\0\12\7\u0936\0\u036f\6\221\0\143\6"+
    "\u0b9d\0\u042f\6\u33d1\0\u0239\6\u04c7\0\105\6\13\0\1\6\56\7\20\0"+
    "\4\7\15\6\u4060\0\2\6\u2163\0\5\7\3\0\26\7\2\0\7\7"+
    "\36\0\4\7\224\0\3\7\u01bb\0\125\6\1\0\107\6\1\0\2\6"+
    "\2\0\1\6\2\0\2\6\2\0\4\6\1\0\14\6\1\0\1\6"+
    "\1\0\7\6\1\0\101\6\1\0\4\6\2\0\10\6\1\0\7\6"+
    "\1\0\34\6\1\0\4\6\1\0\5\6\1\0\1\6\3\0\7\6"+
    "\1\0\u0154\6\2\0\31\6\1\0\31\6\1\0\37\6\1\0\31\6"+
    "\1\0\37\6\1\0\31\6\1\0\37\6\1\0\31\6\1\0\37\6"+
    "\1\0\31\6\1\0\10\6\2\0\62\7\u1600\0\4\6\1\0\33\6"+
    "\1\0\2\6\1\0\1\6\2\0\1\6\1\0\12\6\1\0\4\6"+
    "\1\0\1\6\1\0\1\6\6\0\1\6\4\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\3\6\1\0\2\6\1\0\1\6\2\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0\2\6"+
    "\1\0\1\6\2\0\4\6\1\0\7\6\1\0\4\6\1\0\4\6"+
    "\1\0\1\6\1\0\12\6\1\0\21\6\5\0\3\6\1\0\5\6"+
    "\1\0\21\6\u1144\0\ua6d7\6\51\0\u1035\6\13\0\336\6\u3fe2\0\u021e\6"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\7\36\0\140\7\200\0\360\7\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\1\4\1\5\2\6\1\7"+
    "\1\10\1\11\1\12\17\5\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\2\37\1\40\2\1\2\41\1\1\1\0\1\2\1\0"+
    "\1\42\1\6\1\43\1\6\1\0\3\6\2\43\1\0"+
    "\1\44\3\5\1\45\14\5\1\46\11\5\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\2\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\3\55"+
    "\2\0\4\6\1\43\1\0\17\5\1\70\4\5\1\71"+
    "\5\5\1\56\1\0\1\72\2\0\3\6\1\73\1\5"+
    "\1\74\1\75\2\5\1\76\1\5\1\77\2\5\1\100"+
    "\1\101\10\5\1\102\1\5\1\103\3\6\1\104\4\5"+
    "\1\105\4\5\1\106\2\5\1\107\1\110\3\6\1\111"+
    "\1\112\1\113\1\5\1\114\1\115\1\116\1\5\1\117"+
    "\1\5\3\6\1\5\1\120\1\121\3\6\1\122\6\6"+
    "\1\0\2\6\1\0\2\6\1\0\2\6\1\0\2\6"+
    "\1\0\2\6\1\0\2\6\1\0\1\6\1\43\1\0"+
    "\5\43";

  private static int [] zzUnpackAction() {
    int [] result = new int[260];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\311\0\u014f\0\u0192"+
    "\0\u01d5\0\u0218\0\u025b\0\u029e\0\u02e1\0\311\0\311\0\u0324"+
    "\0\u0367\0\u03aa\0\u03ed\0\u0430\0\u0473\0\u04b6\0\u04f9\0\u053c"+
    "\0\u057f\0\u05c2\0\u0605\0\u0648\0\u068b\0\u06ce\0\311\0\311"+
    "\0\311\0\311\0\311\0\311\0\311\0\311\0\u0711\0\u0754"+
    "\0\u0797\0\u07da\0\311\0\311\0\u081d\0\u0860\0\311\0\311"+
    "\0\311\0\u08a3\0\u08e6\0\311\0\311\0\u0929\0\u096c\0\u09af"+
    "\0\311\0\u09f2\0\u096c\0\u0a35\0\u0a78\0\311\0\u0abb\0\u0afe"+
    "\0\311\0\u0b41\0\u0b84\0\u0bc7\0\u0c0a\0\311\0\u0c4d\0\u0c90"+
    "\0\311\0\u0cd3\0\u0d16\0\u0d59\0\u01d5\0\u0d9c\0\u0ddf\0\u0e22"+
    "\0\u0e65\0\u0ea8\0\u0eeb\0\u0f2e\0\u0f71\0\u0fb4\0\u0ff7\0\u103a"+
    "\0\u107d\0\u01d5\0\u10c0\0\u1103\0\u1146\0\u1189\0\u11cc\0\u120f"+
    "\0\u1252\0\u1295\0\u12d8\0\311\0\311\0\311\0\311\0\311"+
    "\0\311\0\311\0\u131b\0\u135e\0\311\0\311\0\311\0\311"+
    "\0\311\0\311\0\311\0\311\0\311\0\u13a1\0\u13e4\0\u096c"+
    "\0\u1427\0\u146a\0\u14ad\0\u14f0\0\u1533\0\u1576\0\u15b9\0\u15fc"+
    "\0\u163f\0\u1682\0\u16c5\0\u1708\0\u174b\0\u178e\0\u17d1\0\u1814"+
    "\0\u1857\0\u189a\0\u18dd\0\u1920\0\u1963\0\u19a6\0\u19e9\0\u01d5"+
    "\0\u1a2c\0\u1a6f\0\u1ab2\0\u1af5\0\u01d5\0\u1b38\0\u1b7b\0\u1bbe"+
    "\0\u1c01\0\u1c44\0\311\0\u13e4\0\311\0\u1c87\0\u1cca\0\u1d0d"+
    "\0\u1d50\0\u1d93\0\u01d5\0\u1dd6\0\u01d5\0\u01d5\0\u1e19\0\u1e5c"+
    "\0\u01d5\0\u1e9f\0\u01d5\0\u1ee2\0\u1f25\0\u01d5\0\u01d5\0\u1f68"+
    "\0\u1fab\0\u1fee\0\u2031\0\u2074\0\u20b7\0\u20fa\0\u213d\0\u01d5"+
    "\0\u2180\0\u01d5\0\u21c3\0\u2206\0\u2249\0\u01d5\0\u228c\0\u22cf"+
    "\0\u2312\0\u2355\0\u01d5\0\u2398\0\u23db\0\u241e\0\u2461\0\u01d5"+
    "\0\u24a4\0\u24e7\0\u01d5\0\u01d5\0\u252a\0\u256d\0\u25b0\0\u01d5"+
    "\0\u01d5\0\u01d5\0\u25f3\0\u01d5\0\u01d5\0\u01d5\0\u2636\0\u01d5"+
    "\0\u2679\0\u26bc\0\u26ff\0\u2742\0\u2785\0\u01d5\0\u01d5\0\u27c8"+
    "\0\u280b\0\u284e\0\u01d5\0\u2891\0\u28d4\0\u2917\0\u295a\0\u299d"+
    "\0\u29e0\0\u2a23\0\u2a66\0\u2aa9\0\u2aec\0\u2b2f\0\u2b72\0\u2bb5"+
    "\0\u2bf8\0\u2c3b\0\u2c7e\0\u2cc1\0\u2d04\0\u2d47\0\u2d8a\0\u2dcd"+
    "\0\u2e10\0\u2e53\0\u2e96\0\u2ed9\0\u2f1c\0\u2f1c\0\u2f5f\0\u2fa2"+
    "\0\u2fe5\0\u3028\0\u306b\0\u30ae";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[260];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\2\6\1\7\1\10\1\11\1\4\1\12"+
    "\1\13\3\11\3\13\1\11\1\14\1\11\1\15\1\16"+
    "\1\17\1\4\1\20\1\21\1\22\1\23\1\24\3\11"+
    "\1\25\1\26\1\27\2\11\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\2\11\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\0"+
    "\1\6\1\0\1\62\1\63\1\64\21\62\1\65\1\62"+
    "\1\66\54\62\1\67\1\70\1\71\22\67\1\4\1\72"+
    "\51\67\3\73\105\0\1\6\104\0\1\74\1\75\102\0"+
    "\1\76\103\0\13\11\1\0\1\11\4\0\26\11\25\0"+
    "\1\11\10\0\1\77\1\100\1\101\1\102\1\0\1\103"+
    "\1\104\1\105\1\106\1\107\1\110\6\0\1\101\1\0"+
    "\1\110\12\0\2\106\2\0\1\102\40\0\2\13\1\101"+
    "\2\0\3\13\1\106\1\107\1\110\6\0\1\101\1\0"+
    "\1\110\12\0\2\106\43\0\2\107\3\0\3\107\106\0"+
    "\1\111\65\0\13\11\1\0\1\11\4\0\1\11\1\112"+
    "\1\11\1\113\3\11\1\114\16\11\25\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\20\11\1\115\5\11\25\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\1\11\1\116"+
    "\24\11\25\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\4\11\1\117\21\11\25\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\2\11\1\120\20\11\1\121\2\11\25\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\3\11\1\122"+
    "\22\11\25\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\1\11\1\123\3\11\1\124\5\11\1\125\12\11\25\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\10\11\1\126"+
    "\4\11\1\127\4\11\1\130\3\11\25\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\14\11\1\131\3\11\1\132"+
    "\5\11\25\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\14\11\1\133\11\11\25\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\1\11\1\134\2\11\1\135\21\11\25\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\1\11\1\136"+
    "\1\137\2\11\1\140\20\11\25\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\11\1\141\24\11\25\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\13\11\1\142\12\11"+
    "\25\0\1\11\6\0\13\11\1\0\1\11\4\0\1\11"+
    "\1\143\24\11\25\0\1\11\65\0\1\144\102\0\1\145"+
    "\102\0\1\146\102\0\1\147\110\0\1\150\103\0\1\151"+
    "\6\0\1\62\2\0\21\62\1\0\1\62\1\0\54\62"+
    "\2\0\1\64\100\0\1\152\2\0\5\152\1\153\4\152"+
    "\2\153\1\154\4\152\1\155\1\156\1\157\1\160\2\152"+
    "\1\161\4\152\1\162\3\152\1\163\3\152\1\164\30\152"+
    "\30\0\1\165\57\0\1\71\100\0\1\152\2\0\5\152"+
    "\1\166\4\152\2\166\1\167\4\152\4\170\2\152\1\170"+
    "\4\152\1\170\3\152\1\170\3\152\1\170\30\152\3\0"+
    "\1\74\1\5\1\6\100\74\5\171\1\172\75\171\10\0"+
    "\1\77\1\100\1\101\2\0\1\103\1\104\1\105\1\106"+
    "\1\107\1\110\6\0\1\101\1\0\1\110\12\0\2\106"+
    "\43\0\2\100\3\0\3\100\1\106\1\107\1\110\10\0"+
    "\1\110\12\0\2\106\43\0\1\173\1\174\2\0\5\174"+
    "\1\0\1\174\4\0\1\174\3\0\2\174\3\0\1\174"+
    "\5\0\2\174\43\0\1\175\1\100\1\101\2\0\3\175"+
    "\1\106\1\107\1\110\6\0\1\101\1\0\1\110\12\0"+
    "\2\106\43\0\1\105\1\100\1\101\2\0\3\105\1\106"+
    "\1\107\1\110\6\0\1\101\1\0\1\110\12\0\2\106"+
    "\43\0\1\176\1\100\1\101\2\0\3\176\1\106\1\107"+
    "\1\110\6\0\1\101\1\0\1\110\12\0\2\106\43\0"+
    "\2\107\3\0\3\107\1\106\1\0\1\110\10\0\1\110"+
    "\12\0\2\106\43\0\2\177\3\0\3\177\3\0\1\200"+
    "\50\0\1\200\14\0\13\11\1\0\1\11\4\0\1\11"+
    "\1\201\24\11\25\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\4\11\1\202\21\11\25\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\10\11\1\203\15\11\25\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\14\11\1\204\11\11"+
    "\25\0\1\11\6\0\13\11\1\0\1\11\4\0\10\11"+
    "\1\205\1\206\14\11\25\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\12\11\1\207\13\11\25\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\10\11\1\210\15\11\25\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\16\11\1\211"+
    "\7\11\25\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\14\11\1\212\11\11\25\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\12\11\1\213\13\11\25\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\5\11\1\214\20\11\25\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\3\11\1\215"+
    "\22\11\25\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\24\11\1\216\1\11\25\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\15\11\1\217\10\11\25\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\10\11\1\220\1\221\14\11"+
    "\25\0\1\11\6\0\13\11\1\0\1\11\4\0\10\11"+
    "\1\222\15\11\25\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\16\11\1\223\7\11\25\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\20\11\1\224\5\11\25\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\3\11\1\225\22\11"+
    "\25\0\1\11\6\0\13\11\1\0\1\11\4\0\1\11"+
    "\1\226\24\11\25\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\2\11\1\227\23\11\25\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\10\11\1\230\15\11\25\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\15\11\1\231\10\11"+
    "\25\0\1\11\6\0\13\11\1\0\1\11\4\0\15\11"+
    "\1\232\10\11\25\0\1\11\10\0\1\154\4\0\3\154"+
    "\73\0\1\233\4\0\3\233\73\0\1\234\4\0\3\234"+
    "\5\0\1\235\65\0\1\236\4\0\3\236\5\0\1\235"+
    "\55\0\5\171\1\237\75\171\4\0\1\6\1\172\105\0"+
    "\1\173\1\174\1\101\1\0\5\174\1\0\1\174\4\0"+
    "\1\174\1\0\1\101\1\0\2\174\3\0\1\174\5\0"+
    "\2\174\43\0\2\240\1\101\1\0\5\240\1\0\1\240"+
    "\4\0\1\240\1\0\1\101\1\0\2\240\3\0\1\240"+
    "\5\0\2\240\43\0\1\241\1\100\1\101\2\0\3\241"+
    "\1\106\1\107\1\110\6\0\1\101\1\0\1\110\12\0"+
    "\2\106\43\0\1\242\1\100\1\101\2\0\3\242\1\106"+
    "\1\107\1\110\6\0\1\101\1\0\1\110\12\0\2\106"+
    "\43\0\2\177\3\0\3\177\1\106\25\0\2\106\43\0"+
    "\2\177\3\0\3\177\71\0\13\11\1\0\1\11\4\0"+
    "\2\11\1\243\23\11\25\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\5\11\1\244\20\11\25\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\4\11\1\245\21\11\25\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\21\11\1\246"+
    "\4\11\25\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\16\11\1\247\7\11\25\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\1\11\1\250\24\11\25\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\4\11\1\251\21\11\25\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\4\11\1\252"+
    "\21\11\25\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\4\11\1\253\21\11\25\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\10\11\1\254\1\11\1\255\13\11\25\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\4\11\1\256"+
    "\21\11\25\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\3\11\1\257\22\11\25\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\15\11\1\260\10\11\25\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\4\11\1\261\21\11\25\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\10\11\1\262"+
    "\15\11\25\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\2\11\1\263\23\11\25\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\15\11\1\264\10\11\25\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\1\265\25\11\25\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\5\11\1\266\20\11"+
    "\25\0\1\11\6\0\13\11\1\0\1\11\4\0\5\11"+
    "\1\267\20\11\25\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\12\11\1\211\13\11\25\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\11\1\270\24\11\25\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\2\11\1\271\23\11"+
    "\25\0\1\11\6\0\13\11\1\0\1\11\4\0\17\11"+
    "\1\272\6\11\25\0\1\11\25\0\1\235\55\0\4\171"+
    "\1\6\1\237\75\171\10\0\2\273\1\101\1\0\5\273"+
    "\1\0\1\273\4\0\1\273\1\0\1\101\1\0\2\273"+
    "\3\0\1\273\5\0\2\273\43\0\1\274\1\100\1\101"+
    "\2\0\3\274\1\106\1\107\1\110\6\0\1\101\1\0"+
    "\1\110\12\0\2\106\43\0\1\275\1\100\1\101\2\0"+
    "\3\275\1\106\1\107\1\110\6\0\1\101\1\0\1\110"+
    "\12\0\2\106\41\0\13\11\1\0\1\11\4\0\6\11"+
    "\1\276\17\11\25\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\3\11\1\277\22\11\25\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\3\11\1\300\22\11\25\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\3\11\1\301\22\11"+
    "\25\0\1\11\6\0\13\11\1\0\1\11\4\0\15\11"+
    "\1\302\10\11\25\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\10\11\1\303\15\11\25\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\14\11\1\304\11\11\25\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\1\11\1\305\24\11"+
    "\25\0\1\11\6\0\13\11\1\0\1\11\4\0\11\11"+
    "\1\306\14\11\25\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\16\11\1\307\7\11\25\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\2\11\1\310\23\11\25\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\2\11\1\311\23\11"+
    "\25\0\1\11\6\0\13\11\1\0\1\11\4\0\16\11"+
    "\1\312\7\11\25\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\10\11\1\313\15\11\25\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\4\11\1\314\21\11\25\0\1\11"+
    "\10\0\2\315\1\101\1\0\5\315\1\0\1\315\4\0"+
    "\1\315\1\0\1\101\1\0\2\315\3\0\1\315\5\0"+
    "\2\315\43\0\1\316\1\100\1\101\2\0\3\316\1\106"+
    "\1\107\1\110\6\0\1\101\1\0\1\110\12\0\2\106"+
    "\43\0\1\317\1\100\1\101\2\0\3\317\1\106\1\107"+
    "\1\110\6\0\1\101\1\0\1\110\12\0\2\106\41\0"+
    "\13\11\1\0\1\11\4\0\14\11\1\320\11\11\25\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\17\11\1\321"+
    "\6\11\25\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\14\11\1\322\11\11\25\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\14\11\1\323\11\11\25\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\21\11\1\324\4\11\25\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\20\11\1\325"+
    "\5\11\25\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\13\11\1\326\12\11\25\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\17\11\1\327\6\11\25\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\4\11\1\330\21\11\25\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\2\11\1\331"+
    "\23\11\25\0\1\11\10\0\2\332\1\101\1\0\5\332"+
    "\1\0\1\332\4\0\1\332\1\0\1\101\1\0\2\332"+
    "\3\0\1\332\5\0\2\332\43\0\1\333\1\100\1\101"+
    "\2\0\3\333\1\106\1\107\1\110\6\0\1\101\1\0"+
    "\1\110\12\0\2\106\43\0\1\334\1\100\1\101\2\0"+
    "\3\334\1\106\1\107\1\110\6\0\1\101\1\0\1\110"+
    "\12\0\2\106\41\0\13\11\1\0\1\11\4\0\16\11"+
    "\1\335\7\11\25\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\4\11\1\336\21\11\25\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\10\11\1\337\15\11\25\0\1\11"+
    "\10\0\2\340\1\101\1\0\5\340\1\0\1\340\4\0"+
    "\1\340\1\0\1\101\1\0\2\340\3\0\1\340\5\0"+
    "\2\340\43\0\1\341\1\100\1\101\2\0\3\341\1\106"+
    "\1\107\1\110\6\0\1\101\1\0\1\110\12\0\2\106"+
    "\43\0\1\342\1\100\1\101\2\0\3\342\1\106\1\107"+
    "\1\110\6\0\1\101\1\0\1\110\12\0\2\106\41\0"+
    "\13\11\1\0\1\11\4\0\4\11\1\343\21\11\25\0"+
    "\1\11\10\0\2\344\1\101\1\0\5\344\1\0\1\344"+
    "\4\0\1\344\1\0\1\101\1\0\2\344\3\0\1\344"+
    "\5\0\2\344\43\0\1\345\1\100\1\101\2\0\3\345"+
    "\1\106\1\107\1\110\6\0\1\101\1\0\1\110\12\0"+
    "\2\106\43\0\1\346\1\100\1\101\2\0\3\346\1\106"+
    "\1\107\1\110\6\0\1\101\1\0\1\110\12\0\2\106"+
    "\43\0\2\347\1\101\1\0\5\347\1\0\1\347\4\0"+
    "\1\347\1\0\1\101\1\0\2\347\3\0\1\347\5\0"+
    "\2\347\43\0\1\350\1\100\1\101\2\0\3\350\1\106"+
    "\1\107\1\110\6\0\1\101\1\0\1\110\12\0\2\106"+
    "\43\0\1\351\1\100\1\101\2\0\3\351\1\106\1\107"+
    "\1\110\6\0\1\101\1\0\1\110\12\0\2\106\43\0"+
    "\2\352\1\101\1\0\5\352\1\0\1\352\4\0\1\352"+
    "\1\0\1\101\1\0\2\352\3\0\1\352\5\0\2\352"+
    "\43\0\1\353\1\100\1\101\2\0\3\353\1\106\1\107"+
    "\1\110\6\0\1\101\1\0\1\110\12\0\2\106\43\0"+
    "\1\354\1\100\1\101\2\0\3\354\1\106\1\107\1\110"+
    "\6\0\1\101\1\0\1\110\12\0\2\106\43\0\2\355"+
    "\1\101\1\0\5\355\1\0\1\355\4\0\1\355\1\0"+
    "\1\101\1\0\2\355\3\0\1\355\5\0\2\355\43\0"+
    "\1\356\1\100\1\101\2\0\3\356\1\106\1\107\1\110"+
    "\6\0\1\101\1\0\1\110\12\0\2\106\43\0\1\357"+
    "\1\100\1\101\2\0\3\357\1\106\1\107\1\110\6\0"+
    "\1\101\1\0\1\110\12\0\2\106\43\0\2\360\1\101"+
    "\1\0\5\360\1\0\1\360\4\0\1\360\1\0\1\101"+
    "\1\0\2\360\3\0\1\360\5\0\2\360\43\0\1\361"+
    "\1\100\1\101\2\0\3\361\1\106\1\107\1\110\6\0"+
    "\1\101\1\0\1\110\12\0\2\106\43\0\1\362\1\100"+
    "\1\101\2\0\3\362\1\106\1\107\1\110\6\0\1\101"+
    "\1\0\1\110\12\0\2\106\43\0\2\363\1\101\1\0"+
    "\5\363\1\0\1\363\4\0\1\363\1\0\1\101\1\0"+
    "\2\363\3\0\1\363\5\0\2\363\43\0\1\364\1\100"+
    "\1\101\2\0\3\364\1\106\1\107\1\110\6\0\1\101"+
    "\1\0\1\110\12\0\2\106\43\0\1\365\1\100\1\101"+
    "\2\0\3\365\1\106\1\107\1\110\6\0\1\101\1\0"+
    "\1\110\12\0\2\106\43\0\2\366\1\101\1\0\5\366"+
    "\1\0\1\366\4\0\1\366\1\0\1\101\1\0\2\366"+
    "\3\0\1\366\5\0\2\366\43\0\1\367\1\100\1\101"+
    "\2\0\3\367\1\106\1\107\1\110\6\0\1\101\1\0"+
    "\1\110\12\0\2\106\43\0\1\370\1\100\1\101\2\0"+
    "\3\370\1\106\1\107\1\110\6\0\1\101\1\0\1\110"+
    "\12\0\2\106\43\0\2\371\1\101\1\0\5\371\1\0"+
    "\1\371\4\0\1\371\1\0\1\101\1\0\2\371\3\0"+
    "\1\371\5\0\2\371\43\0\1\372\1\100\1\101\2\0"+
    "\3\372\1\106\1\107\1\110\6\0\1\101\1\0\1\110"+
    "\12\0\2\106\43\0\1\373\1\100\1\101\2\0\3\373"+
    "\1\106\1\107\1\110\6\0\1\101\1\0\1\110\12\0"+
    "\2\106\43\0\2\374\1\101\1\0\5\374\1\0\1\374"+
    "\4\0\1\374\1\0\1\101\1\0\2\374\3\0\1\374"+
    "\5\0\2\374\43\0\1\375\1\100\1\101\2\0\3\375"+
    "\1\106\1\107\1\110\6\0\1\101\1\0\1\110\12\0"+
    "\2\106\43\0\1\376\1\100\1\101\2\0\3\376\1\106"+
    "\1\107\1\110\6\0\1\101\1\0\1\110\12\0\2\106"+
    "\43\0\2\377\1\101\1\0\5\377\1\0\1\377\4\0"+
    "\1\377\1\0\1\101\1\0\2\377\3\0\1\377\5\0"+
    "\2\377\43\0\1\u0100\1\100\1\101\2\0\3\u0100\1\106"+
    "\1\107\1\110\6\0\1\101\1\0\1\110\12\0\2\106"+
    "\45\0\1\101\16\0\1\101\61\0\1\u0101\1\100\1\101"+
    "\2\0\3\u0101\1\106\1\107\1\110\6\0\1\101\1\0"+
    "\1\110\12\0\2\106\43\0\1\u0102\1\100\1\101\2\0"+
    "\3\u0102\1\106\1\107\1\110\6\0\1\101\1\0\1\110"+
    "\12\0\2\106\43\0\1\u0103\1\100\1\101\2\0\3\u0103"+
    "\1\106\1\107\1\110\6\0\1\101\1\0\1\110\12\0"+
    "\2\106\43\0\1\u0104\1\100\1\101\2\0\3\u0104\1\106"+
    "\1\107\1\110\6\0\1\101\1\0\1\110\12\0\2\106"+
    "\43\0\2\100\1\101\2\0\3\100\1\106\1\107\1\110"+
    "\6\0\1\101\1\0\1\110\12\0\2\106\33\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12529];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\7\1\2\11\17\1\10\11"+
    "\4\1\2\11\2\1\3\11\2\1\2\11\3\1\1\11"+
    "\1\1\1\0\1\1\1\0\1\11\2\1\1\11\1\0"+
    "\3\1\1\11\1\1\1\0\1\11\32\1\7\11\2\1"+
    "\11\11\3\1\2\0\5\1\1\0\32\1\1\11\1\0"+
    "\1\11\2\0\112\1\1\0\2\1\1\0\2\1\1\0"+
    "\2\1\1\0\2\1\1\0\2\1\1\0\2\1\1\0"+
    "\2\1\1\0\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[260];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  StringBuilder string = new StringBuilder();


  private long parseLong(int start, int end, int radix) {
    long result = 0;
    long digit;

    for (int i = start; i < end; i++) {
      digit  = Character.digit(yycharat(i),radix);
      result*= radix;
      result+= digit;
    }

    return result;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2880) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public String yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return "67";
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new RuntimeException("Illegal character \""+yytext()+
                                                              "\" at line "+yyline+", column "+yycolumn);
            }
          case 83: break;
          case 2: 
            { /* ignore */
            }
          case 84: break;
          case 3: 
            { return "60";
            }
          case 85: break;
          case 4: 
            { return "57";
            }
          case 86: break;
          case 5: 
            { return "63";
            }
          case 87: break;
          case 6: 
            { return "61";
            }
          case 88: break;
          case 7: 
            { return "38";
            }
          case 89: break;
          case 8: 
            { return "54";
            }
          case 90: break;
          case 9: 
            { yybegin(STRING); string.setLength(0);
            }
          case 91: break;
          case 10: 
            { yybegin(CHARLITERAL);
            }
          case 92: break;
          case 11: 
            { return "30");
            }
          case 93: break;
          case 12: 
            { return "31";
            }
          case 94: break;
          case 13: 
            { return "32";
            }
          case 95: break;
          case 14: 
            { return "33";
            }
          case 96: break;
          case 15: 
            { return "34";
            }
          case 97: break;
          case 16: 
            { return "35";
            }
          case 98: break;
          case 17: 
            { return "36";
            }
          case 99: break;
          case 18: 
            { return "37";
            }
          case 100: break;
          case 19: 
            { return "39";
            }
          case 101: break;
          case 20: 
            { return "40";
            }
          case 102: break;
          case 21: 
            { return "41";
            }
          case 103: break;
          case 22: 
            { return "42";
            }
          case 104: break;
          case 23: 
            { return "43";
            }
          case 105: break;
          case 24: 
            { return "44";
            }
          case 106: break;
          case 25: 
            { return "58";
            }
          case 107: break;
          case 26: 
            { return "53";
            }
          case 108: break;
          case 27: 
            { return "55";
            }
          case 109: break;
          case 28: 
            { return "56";
            }
          case 110: break;
          case 29: 
            { return "59";
            }
          case 111: break;
          case 30: 
            { string.append( yytext() );
            }
          case 112: break;
          case 31: 
            { throw new RuntimeException("Unterminated string at end of line");
            }
          case 113: break;
          case 32: 
            { yybegin(YYINITIAL); return "64";
            }
          case 114: break;
          case 33: 
            { throw new RuntimeException("Unterminated character literal at end of line");
            }
          case 115: break;
          case 34: 
            { return "49";
            }
          case 116: break;
          case 35: 
            { return "62";
            }
          case 117: break;
          case 36: 
            { return "52";
            }
          case 118: break;
          case 37: 
            { return "25";
            }
          case 119: break;
          case 38: 
            { return "18";
            }
          case 120: break;
          case 39: 
            { return "45";
            }
          case 121: break;
          case 40: 
            { return "47";
            }
          case 122: break;
          case 41: 
            { return "46";
            }
          case 123: break;
          case 42: 
            { return "48";
            }
          case 124: break;
          case 43: 
            { return "50";
            }
          case 125: break;
          case 44: 
            { return "51";
            }
          case 126: break;
          case 45: 
            { throw new RuntimeException("Illegal escape sequence \""+yytext()+"\"");
            }
          case 127: break;
          case 46: 
            { char val = (char) Integer.parseInt(yytext().substring(1),8);
                        				   string.append( val );
            }
          case 128: break;
          case 47: 
            { string.append( '\"' );
            }
          case 129: break;
          case 48: 
            { string.append( '\'' );
            }
          case 130: break;
          case 49: 
            { string.append( '\\' );
            }
          case 131: break;
          case 50: 
            { string.append( '\b' );
            }
          case 132: break;
          case 51: 
            { string.append( '\r' );
            }
          case 133: break;
          case 52: 
            { string.append( '\t' );
            }
          case 134: break;
          case 53: 
            { string.append( '\n' );
            }
          case 135: break;
          case 54: 
            { string.append( '\f' );
            }
          case 136: break;
          case 55: 
            { yybegin(YYINITIAL); return "65";
            }
          case 137: break;
          case 56: 
            { return "15";
            }
          case 138: break;
          case 57: 
            { return "13";
            }
          case 139: break;
          case 58: 
            { yybegin(YYINITIAL);
			                              int val = Integer.parseInt(yytext().substring(1,yylength()-1),8);
			                            return "65";
            }
          case 140: break;
          case 59: 
            { return "1";
            }
          case 141: break;
          case 60: 
            { return "3";
            }
          case 142: break;
          case 61: 
            { return "16";
            }
          case 143: break;
          case 62: 
            { return "11";
            }
          case 144: break;
          case 63: 
            { return "66";
            }
          case 145: break;
          case 64: 
            { return "4";
            }
          case 146: break;
          case 65: 
            { return "5";
            }
          case 147: break;
          case 66: 
            { return "17";
            }
          case 148: break;
          case 67: 
            { return "27";
            }
          case 149: break;
          case 68: 
            { return "2";
            }
          case 150: break;
          case 69: 
            { return "6";
            }
          case 151: break;
          case 70: 
            { return "26";
            }
          case 152: break;
          case 71: 
            { return "12";
            }
          case 153: break;
          case 72: 
            { return "21";
            }
          case 154: break;
          case 73: 
            { return "20";
            }
          case 155: break;
          case 74: 
            { return "23";
            }
          case 156: break;
          case 75: 
            { return "22";
            }
          case 157: break;
          case 76: 
            { return "29";
            }
          case 158: break;
          case 77: 
            { return "24";
            }
          case 159: break;
          case 78: 
            { return "19";
            }
          case 160: break;
          case 79: 
            { return "10";
            }
          case 161: break;
          case 80: 
            { return "28";
            }
          case 162: break;
          case 81: 
            { return "14";
            }
          case 163: break;
          case 82: 
            { return "7";
            }
          case 164: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
